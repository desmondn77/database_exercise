تفاوت  Jakartaو  Javax

در تاریخ دهم سپتامبر 2019، بنیاد Eclipse  رسما از نسخه کامل پلتفرم Jakarta EE 8 رونمایی کرد. به گفته وبسایت جاکارتا تفاوت اساسی میان Jakarta EE 8  و Java EE 8 در این است که بنیاد Eclipse مشخصات JakartaEE را تحت فرآیند مشخصات EE Jakarta و فرآیند توسعه Eclipse توسعه داده است. این یعنی JakartaEE جانشین متن باز نسخه های Javax است. از منظر فضای نام، جاکارتا EE 8 هنوز از نامگذاری javax.* استفاده می کند. با این حال، نسخه Jakarta EE 9 در 8 دسامبر 2020، jakarta.* را به عنوان فضای نام جایگزین javax.* برای مشخصات Jakarta EE معرفی شد. 
جاکارتا برای چه منظور استفاده می‌شود؟
Jakarta EE یک چارچوب بالغ و مبتنی بر جاوا است که به توسعه دهندگان کمک می کند تا به سمت استفاده از فناوری های مدرن حرکت کنند و در عین حال همچنان از کد EE موجود جاکارتا استفاده کنند. در درجه اول برای ایجاد APIهایی استفاده می شود که ارتباط بین برنامه های مختلف را امکان پذیر می کند.
Jakarta Persistence API قبلاً به عنوان Java Persistence API شناخته می شد. JPA شامل مشخصاتی است که نگاشت شی رابطه ای را برای مدیریت داده های رابطه ای در برنامه های جاوا تسهیل می کند. اکثر ابزارهای ORM مانند Hibernate، IBatis، Toplink بر اساس استانداردهای JPA پیاده سازی شده اند.
در اصل جاکارتا و javax  قادرند در کنار یکدیگر کار کنند به این شکل که با استفاده از دستورات پایه لینوکس، داده های مورد نظر از javax به فضای نام جاکارتا تبدیل می شود و سپس نتیجه به یک branch اختصاصی هدایت می شود.
فرایند تغییر نام Java EE
در 12 سپتامبر 2017 شرکت اوراکل رسما Java EE را به بنیاد Eclipse واگذار کرد. پس از آن اوراکل و Eclipse  برای ادامه فعالیت Java EE با همین نام به توافق نرسیدند و نام آن به JakartaEE تغییر یافت. 
تغییرات Java EE پس از واگذاری به بنیاد Eclipse
پس از واگذاری به Eclipse، می‌توان گفت که Java EE از رقبای خود تا حدی عقب ماند. این موضوع نتیجه واگذاری آن از سوی شرکت اوراکل بود. اوراکل که با توجه به حمایت های مالی ومدیریتی گسترده اش توانسته بود Java EE را در مسیر درستی قرار دهد، پس از واگذاری آن به Eclipse  باعث شد تا حمایت های قابل توجه از روی آن برداشته شود. البته پیش از انجام این فرایند Java EE تا حدی خود را با شرایط رقبای خود همگون نکرده بود. از جمله این موارد می توان به کندی آن و نبود استانداردهای مشخصی از قبیل cloud computing و reactive programming اشاره کرد که باعث شد تا توسعه دهندگان را به spring و  play و vert.x سرازیر کرد.
مقایسه Java EE و spring boot
مقایسه این دو با توجه به معیارهای مختلف به شرح زیر است:
امنیت: 
در Java EE، وب سرویس ها و برنامه ها از اجزای متعددی تشکیل شده اند که می توانند در کانتینرهای مختلف تنظیم شوند. این کانتینرها وظیفه امنیت را بر عهده دارند.
•	امنیت اعلامی: مکانیسم امنیتی برنامه توسط برنامه به صورت خارجی اعلام و مدیریت می شود. این شامل امنیت در سطح برنامه و امنیت در سطح مؤلفه است.
•	امنیت برنامه‌ای: زمانی از راه‌حل تعبیه‌شده استفاده می‌شود که امنیت اعلامی به تنهایی برای ساخت مدل امنیتی مورد نیاز کافی نباشد.
این مشخصات از ویژگی های امنیتی گسترده ای مانند احراز هویت، مجوز، یکپارچگی داده ها و امنیت حمل و نقل پشتیبانی می کند. همچنین با استفاده از ماشین مجازی اجرا می شود و یک لایه حفاظتی دیگر اضافه می کند.
فریمورک Spring از محصول دیگری به نام «Spring Security» به‌عنوان چارچوب احراز هویت و کنترل دسترسی بسیار قابل تنظیم خود استفاده می‌کند. بزرگترین تفاوت بین Java Spring و Java EE سهولت اجرای تمام اقدامات امنیتی است.
از نظر معماری و نوع ساختار:
Java EE از مدل معماری سه لایه پیروی می کند. هر لایه متفاوت است:
•	رابط کاربری بر روی UX و ثبات تمرکز دارد
•	منطق تجاری اصلی نرم افزار
•	پایگاه های داده و داده ها
Spring از معماری لایه ای پیروی می کند که از حدود 20 ماژول تشکیل شده است. هر کدام دارای ویژگی های متفاوتی هستند و استفاده از همه آنها ضروری نیست.
